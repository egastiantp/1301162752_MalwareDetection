#!/usr/bin/env python
# coding: utf-8

# In[6]:


#Import library dan juga declare function untuk dataset yang akan digunakan

import pandas as pd
import numpy as np

malData = pd.read_csv("MalwareData.csv", sep="|")

legit = malData[0:41323].drop(["legitimate"], axis=1)
mal = malData[41323::].drop(["legitimate"],axis=1)

print("The shape of the legit dataset is: %s samples, %s features"%(legit.shape[0],legit.shape[1]))
print("The shape of the malware dataset is: %s samples, %s features"%(mal.shape[0],mal.shape[1]))


# In[5]:


#Menampilkan kolom dan tabel apa saja yang terdapat di dalam dataset

print(malData.columns)


# In[6]:


#Menampilkan 5 baris teratas di dalam tiap tabel yang ada di dalam dataset

print(malData.head(5))


# In[7]:


pd.set_option("display.max_columns", None)


# In[8]:


print(malData.head(5))


# In[11]:


#Menampilkan hanya table legitimate di index ke 1

print(legit.take([1]))


# In[12]:


#Menampilkan hanya table legitimate di index ke 1

print(mal.take([1]))


# In[44]:


#Import library dari Sci_kit learn

from sklearn.ensemble import ExtraTreesClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_validate
from sklearn import model_selection


# In[45]:


#Declare fungsi yang akan digunakan

data_in = malData.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = malData['legitimate'].values
extratrees = ExtraTreesClassifier().fit(data_in, labels)
select = SelectFromModel(extratrees, prefit=True)
data_in_new = select.transform(data_in)
print(data_in.shape, data_in_new.shape)


# In[46]:


#Declare fungsi berdasarkan fungsi yang sudah dibuat diatas dan juga membuat fungsi for untuk mengeksekusinya

features = data_in_new.shape[1]
importances = extratrees.feature_importances_
indices = np.argsort(importances)[::-1]

for f in range(features):
    print("%d"%(f+1), malData.columns[2+indices[f]],importances[indices[f]])


# In[47]:


from sklearn.ensemble import RandomForestClassifier
legit_train, legit_test, mal_train, mal_test = model_selection.train_test_split(data_in_new, labels, test_size=0.2)
classif = RandomForestClassifier(n_estimators=50)

classif.fit(legit_train, mal_train)


# In[48]:


#Menampilkan nilai daripada algoritma yang digunakan

print("The score of the algorithms: ", classif.score(legit_test, mal_test)*100)


# In[49]:


from sklearn.metrics import confusion_matrix

result = classif.predict(legit_test)
conf_mat = confusion_matrix(mal_test,result)


# In[50]:


#Menampilkan jumlah baris dan kolom pada fungsi conf_mat

conf_mat.shape


# In[51]:


#Menampilkan jenis dari conf_mat

type(conf_mat)


# In[52]:


#Menampilkan detail keseluruhan dari conf_mat

conf_mat


# In[55]:


#Menghitung nilai false positives dan false negatives dari conf_mat

print("False positives: ",conf_mat[0][1]/sum(conf_mat[0])*100)
print("False negatives: ",conf_mat[1][0]/sum(conf_mat[1])*100)


# In[56]:


#Import algoritma lain dari Sci-kit learn

from sklearn.ensemble import GradientBoostingClassifier

grad_boost = GradientBoostingClassifier(n_estimators=50)
grad_boost.fit(legit_train, mal_train)


# In[57]:


#Menampilkan nilai daripada algoritma yang digunakan

print("The score of the Gradient Boosting Classifier is: ",grad_boost.score(legit_test,mal_test)*100)


# In[ ]:




